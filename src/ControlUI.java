/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//import com.javafx.tools.doclets.internal.toolkit.builders.ConstantsSummaryBuilder;
import edu.uci.ics.jung.visualization.VisualizationViewer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 *
 * @author azhar
 */
public class ControlUI extends javax.swing.JFrame {

    /**
     * Creates new form ControlUI
     */
    ArrayList<DynamicTreeNode> baseStations;
    VisualizationViewer<DynamicTreeNode,Number> graphViewer;
    //Graph<DynamicTreeNode,Number> graph;
    DynamicTree completeTree;

    public ControlUI(DynamicTree dynamicTree, VisualizationViewer<DynamicTreeNode,Number> graphViewer) {
        this.completeTree=dynamicTree;
        this.baseStations=dynamicTree.leafNodes;
        this.graphViewer=graphViewer;
        //this.graph=graph;
        initComponents();

        // initialize the database based on the mode selection

        Constants.CURRENT_MODE=jComboBox_ChangeMode.getSelectedItem().toString();
        initializeChangeMode();






    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane_HostList = new javax.swing.JScrollPane();
        jTextArea_MobileHosts = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jComboBox_BaseStations = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton_CHL_Change = new javax.swing.JButton();
        jComboBox_CHL_NewBaseStation = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jComboBox_CHL_OldBaseStation = new javax.swing.JComboBox();
        jComboBox_CHL_Host = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_GC_DstHost = new javax.swing.JTextField();
        jTextField_GC_SrcHost = new javax.swing.JTextField();
        jButton_GC_Call = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jComboBox_ChangeMode = new javax.swing.JComboBox();
        jButton_CM_Change = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Show Mobile Hosts"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("List Of Mobile Hosts"));

        jTextArea_MobileHosts.setEditable(false);
        jTextArea_MobileHosts.setColumns(20);
        jTextArea_MobileHosts.setRows(5);
        jScrollPane_HostList.setViewportView(jTextArea_MobileHosts);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane_HostList, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane_HostList)
                                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Base Station"));

        jComboBox_BaseStations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_BaseStationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jComboBox_BaseStations, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBox_BaseStations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operation Terminal"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Change Host Location"));

        jLabel2.setText("New Base Station");

        jButton_CHL_Change.setText("Change");
        jButton_CHL_Change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CHL_ChangeActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Host"));

        jComboBox_CHL_OldBaseStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_CHL_OldBaseStationActionPerformed(evt);
            }
        });

        jLabel1.setText("Base Station");

        jLabel5.setText("Host");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGap(45, 45, 45)
                                                .addComponent(jComboBox_CHL_OldBaseStation, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox_CHL_Host, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGap(70, 70, 70)
                                                .addComponent(jLabel1)
                                                .addGap(67, 67, 67)
                                                .addComponent(jLabel5)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBox_CHL_OldBaseStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox_CHL_Host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(59, 59, 59)
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jComboBox_CHL_NewBaseStation, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(36, 36, 36)
                                                .addComponent(jButton_CHL_Change, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 30, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBox_CHL_NewBaseStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton_CHL_Change))
                                .addGap(7, 7, 7))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate Call"));

        jLabel3.setText("Source Host:");

        jLabel4.setText("Dest. Host:");

        jButton_GC_Call.setText("Call");
        jButton_GC_Call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GC_CallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel4)
                                                .addGap(12, 12, 12)
                                                .addComponent(jTextField_GC_DstHost))
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel3)
                                                .addGap(3, 3, 3)
                                                .addComponent(jTextField_GC_SrcHost)))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton_GC_Call)
                                .addGap(109, 109, 109))
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextField_GC_SrcHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextField_GC_DstHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_GC_Call))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Change Mode"));

        jComboBox_ChangeMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Values", "Actual Pointers",
                "Database with Forwarding Pointers", "Actual Pointer with Forwarding Pointers",
        "Database with Replication","Actual Pointer Replication"}));

        jButton_CM_Change.setText("Change");
        jButton_CM_Change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CM_ChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(126, 126, 126)
                                                .addComponent(jButton_CM_Change))
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(52, 52, 52)
                                                .addComponent(jComboBox_ChangeMode, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jComboBox_ChangeMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jButton_CM_Change)
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        


    // code for change host location
    private void jButton_CHL_ChangeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        DynamicTreeNode oldBaseStation=(DynamicTreeNode)jComboBox_CHL_OldBaseStation.getSelectedItem();
        DynamicTreeNode newBaseStation=(DynamicTreeNode)jComboBox_CHL_NewBaseStation.getSelectedItem();
        String host=jComboBox_CHL_Host.getSelectedItem().toString();

        System.out.println("host: "+host+" is moving from Base Station "+oldBaseStation+" to BaseStation "+newBaseStation);
        changeBaseStation(oldBaseStation,newBaseStation,host);


        //updating the view in the UI component after Host moves from old to new base station


        updatejComboBox_CHL_Host(oldBaseStation);
        updatejTextArea_MobileHosts();


    }

    private void jComboBox_BaseStationsActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        updatejTextArea_MobileHosts();


    }

    private void jButton_CM_ChangeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        //changeBaseStationColor(baseStations.get(3));
        Constants.CURRENT_MODE=jComboBox_ChangeMode.getSelectedItem().toString();
        initializeChangeMode();
        //changeBaseStationColor(baseStations.get(4));

    }

    private void jButton_GC_CallActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        traceCall();


    }

    private void jComboBox_CHL_OldBaseStationActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        DynamicTreeNode selectedBaseStation= (DynamicTreeNode)jComboBox_CHL_OldBaseStation.getSelectedItem();

        updatejComboBox_CHL_Host(selectedBaseStation);
        updateCHLNewBaseStations(selectedBaseStation);


    }






    //*********************************************  custom code starts here  ***********************************//

    private void updatejComboBox_CHL_Host(DynamicTreeNode selectedBaseStation){

        HashMap<String, Object> mobileHosts = selectedBaseStation.database;


        Iterator entries = mobileHosts.entrySet().iterator();
        jComboBox_CHL_Host.removeAllItems();
        while (entries.hasNext()) {
            Map.Entry thisEntry = (Map.Entry) entries.next();
            if(thisEntry.getValue().equals(selectedBaseStation)) {
                jComboBox_CHL_Host.addItem(thisEntry.getKey());
            }
        }

    }
    private void updatejTextArea_MobileHosts(){

        DynamicTreeNode selectedBaseStation= (DynamicTreeNode)jComboBox_BaseStations.getSelectedItem();
        HashMap<String, Object> mobileHosts = selectedBaseStation.database;
        String hosts= new String();

        Iterator entries = mobileHosts.entrySet().iterator();

        while (entries.hasNext()) {
            Map.Entry thisEntry = (Map.Entry) entries.next();

            if(thisEntry.getValue().equals(selectedBaseStation)) {
                hosts = hosts + thisEntry.getKey().toString() + "\n";
            }
        }
        jTextArea_MobileHosts.setText(hosts);
    }



    public void addBaseStationsInDropdown(){

        for (DynamicTreeNode node: baseStations){
            jComboBox_BaseStations.addItem(node);
            jComboBox_CHL_NewBaseStation.addItem(node);
            jComboBox_CHL_OldBaseStation.addItem(node);
        }

    }

    private void updateCHLNewBaseStations(DynamicTreeNode selectedBaseStation){
        jComboBox_CHL_NewBaseStation.removeAllItems();
        for (DynamicTreeNode baseStation:baseStations){

            if (!selectedBaseStation.equals(baseStation)){
                jComboBox_CHL_NewBaseStation.addItem(baseStation);
            }

        }
    }


    //replication(String user, int maxRepli,int maxLevel,int Smax,int Smin,DynamicTreeNode current,ArrayList<DynamicTreeNode> levelNodes,
            //ArrayList<DynamicTreeNode> addReplication,ArrayList<DynamicTreeNode> deleteReplication){
    // this function calls necessary functions of DynamicTree class to change the Base Station for an user
    private void changeBaseStation(DynamicTreeNode oldBaseStation, DynamicTreeNode newBaseStation, String host){

        ArrayList<DynamicTreeNode> updatedNodes= new ArrayList<>();
        ArrayList<DynamicTreeNode> deletedNodes= new ArrayList<>();


        int maxReplication=3;
        int maxLevel=1;
        int Smax=10;
        int Smin=5;


        if (Constants.CURRENT_MODE==Constants.MODE_ACTUAL_POINTERS){

            System.out.println("Using Actual Pointer Mode");
            completeTree.updateDatabase_actualPointer(host, newBaseStation, newBaseStation, true, updatedNodes, deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);

        }else if (Constants.CURRENT_MODE==Constants.MODE_DATABASE_VALUES){
            System.out.println("Changing Base Station using Actual Database Value Mode");
            completeTree.updateDatabase_databseValue(host,newBaseStation,newBaseStation,false,updatedNodes,deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_DATABASE_FORWARD_POINTERS){

            System.out.println("Changing Base Station using Forward Pointers");
            
            completeTree.updateDatabase_forwarding_address(host,completeTree.findForwardingLevel(host,oldBaseStation),oldBaseStation,newBaseStation,updatedNodes,deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_POINTER_FORWARD_POINTERS){
            System.out.println("Changing Base Station using "+ Constants.MODE_POINTER_FORWARD_POINTERS);
            completeTree.updateDatabase_forwarding_pointer(host,completeTree.findForwardingLevel(host,oldBaseStation),oldBaseStation,newBaseStation,updatedNodes,deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);


        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_REPLICATION_DATABASE){
            System.out.println("Changing Base Station using "+Constants.MODE_REPLICATION_DATABASE);
            completeTree.updateDatabase_databseValue(host,newBaseStation,newBaseStation,false,updatedNodes,deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);
            completeTree.replication(host,maxReplication,maxLevel,Smax,Smin,newBaseStation,completeTree.leafNodes,updatedNodes,deletedNodes);

            traceBaseStationChangeMovement(updatedNodes, deletedNodes);


        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_REPLICATION_POINTER){
            System.out.println("Changing Base Station using "+Constants.MODE_REPLICATION_POINTER);

            System.out.println("Changing Base Station using "+Constants.MODE_REPLICATION_DATABASE);
            completeTree.updateDatabase_actualPointer(host, newBaseStation, newBaseStation, true, updatedNodes, deletedNodes);
            traceBaseStationChangeMovement(updatedNodes, deletedNodes);
            completeTree.replication(host,maxReplication,maxLevel,Smax,Smin,newBaseStation,completeTree.leafNodes,updatedNodes,deletedNodes);

            traceBaseStationChangeMovement(updatedNodes, deletedNodes);

        }
        completeTree.testDatabase.put(host,newBaseStation);
    }







    ArrayList<DynamicTreeNode> updatedNodes =null;
    ArrayList<DynamicTreeNode> deletedNodes=null;


    private void traceCall(){


        updatedNodes=new ArrayList<>();

        String caller = jTextField_GC_SrcHost.getText();
        String callee=jTextField_GC_DstHost.getText();

        DynamicTreeNode caller_BaseStation = completeTree.getCallerLocation(caller);

        completeTree.makeCall(caller_BaseStation,callee,updatedNodes);
        completeTree.updateUserCallMetric(callee,caller_BaseStation,50);

        new Thread(){
            @Override
            public void run(){


                if (updatedNodes != null && !updatedNodes.isEmpty()){

                    for (DynamicTreeNode node: updatedNodes){
                        node.nodeColor=Constants.NODE_COLOR_CALLTRACE;

                        try {
                            sleep(1000);
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        graphViewer.repaint();
                        //node.nodeColor=Constants.NODE_COLOR_DEFAULT;

                    }

                    try {
                        sleep(3000);
                    }catch (Exception ex){
                        ex.printStackTrace();
                    }
                    restoreNodeDefaultColor(updatedNodes);
                    graphViewer.repaint();


                }

            }

        }.start();


    }

    private void restoreNodeDefaultColor(ArrayList<DynamicTreeNode> nodeList){
        for (DynamicTreeNode node:nodeList){
            node.nodeColor=Constants.NODE_COLOR_DEFAULT;
        }
    }

    private void traceBaseStationChangeMovement(ArrayList<DynamicTreeNode> un, ArrayList<DynamicTreeNode> dn){

        updatedNodes =un;
        deletedNodes=dn;



        new Thread(){
            @Override
            public void run(){


                if (updatedNodes != null && !updatedNodes.isEmpty()){

                    for (DynamicTreeNode node: updatedNodes){
                        node.nodeColor=Constants.NODE_COLOR_UPDATED;



                        try {
                            sleep(1000);
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        graphViewer.repaint();
                        //node.nodeColor=Constants.NODE_COLOR_DEFAULT;

                    }

                    graphViewer.repaint();


                }

                if (deletedNodes!=null && !deletedNodes.isEmpty()){

                    for (DynamicTreeNode node: deletedNodes){
                        node.nodeColor=Constants.NODE_COLOR_DELETED;




                        try {
                            sleep(1000);
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        graphViewer.repaint();
                        //node.nodeColor=Constants.NODE_COLOR_DEFAULT;

                    }
                    graphViewer.repaint();

                }

                try {
                    sleep(2000);
                }catch (Exception ex){
                    ex.printStackTrace();
                }
                restoreNodeDefaultColor(updatedNodes);
                restoreNodeDefaultColor(deletedNodes);

                graphViewer.repaint();

                updatedNodes=null;
                deletedNodes=null;


            }

        }.start();


    }



    // once host moves from one Base Station to Another need to change text in jTextArea_MobileHosts and jComboBox_CHL_Host



    private void initializeChangeMode(){
        if (Constants.CURRENT_MODE==Constants.MODE_ACTUAL_POINTERS){
            completeTree.initialDatabase_Pointer(Constants.USER_FILE);

        }else if (Constants.CURRENT_MODE==Constants.MODE_DATABASE_VALUES){
            completeTree.initialDatabase_Value(Constants.USER_FILE);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_DATABASE_FORWARD_POINTERS){
            completeTree.initialDatabase_Value(Constants.USER_FILE);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_POINTER_FORWARD_POINTERS){
            completeTree.initialDatabase_Pointer(Constants.USER_FILE);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_REPLICATION_DATABASE){
            completeTree.initialDatabase_Value(Constants.USER_FILE);

        }else if (Constants.CURRENT_MODE.toString()==Constants.MODE_REPLICATION_POINTER){
            completeTree.initialDatabase_Pointer(Constants.USER_FILE);

        }
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton_CHL_Change;
    private javax.swing.JButton jButton_CM_Change;
    private javax.swing.JButton jButton_GC_Call;
    private javax.swing.JComboBox jComboBox_BaseStations;
    private javax.swing.JComboBox jComboBox_CHL_Host;
    private javax.swing.JComboBox jComboBox_CHL_NewBaseStation;
    private javax.swing.JComboBox jComboBox_CHL_OldBaseStation;
    private javax.swing.JComboBox jComboBox_ChangeMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane_HostList;
    private javax.swing.JTextArea jTextArea_MobileHosts;
    private javax.swing.JTextField jTextField_GC_DstHost;
    private javax.swing.JTextField jTextField_GC_SrcHost;
    // End of variables declaration                   
}
